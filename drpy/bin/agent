import os
import shutil

from logging.config import fileConfig

from drpy import logger
from drpy.cli import cli
from drpy.models import config
from drpy.api.client import Client
from drpy.models.runner import AgentState
from drpy.fsm.states.initialize import Initialize


def main():
    parser = cli.build_arg_parser()
    args = parser.parse_args()
    conf_file = args.conf_file
    if not cli.verify_conf_file(conf_file):
        raise NotImplementedError

    conf = config.parse(conf_file)
    runner = args.runner

    fileConfig(conf_file)
    logger.debug("Starting up agent")
    drpclient = Client(
        endpoint=conf.endpoint,
        token=conf.token
    )
    agent_state = AgentState(
        client=drpclient,
        config=conf,
        wait=False,
        runner=runner
    )
    if agent_state.config.command_path == '' or \
            agent_state.config.command_path is None:
        path = "/opt/rackn/runner"
    else:
        path = agent_state.config.command_path
    if os.path.exists(path):
        shutil.rmtree(path)
    machine_state = Initialize()
    while machine_state.state != "Exit":
        machine_state, agent_state = machine_state.on_event(
            agent_state=agent_state,
            machine_uuid=conf.machine_uuid
        )


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.debug("Keyboard interrupt detected. Exiting...")
        raise SystemExit
